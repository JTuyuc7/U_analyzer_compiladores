
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\006" +
    "\000\002\004\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\011\011\000\002\011\017\000\002" +
    "\012\011\000\002\013\013\000\002\017\003\000\002\017" +
    "\005\000\002\017\005\000\002\020\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\021\003\000" +
    "\002\021\005\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\005\000\002\005\003\000\002\015\003\000\002\015\005" +
    "\000\002\016\003\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\024\021\014\036\013\041\007\042\027\052" +
    "\026\053\020\054\017\055\010\056\016\001\002\000\024" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\047\022" +
    "\ufff0\030\ufff0\051\ufff0\001\002\000\030\002\ufff9\021\ufff9" +
    "\036\ufff9\041\ufff9\042\ufff9\050\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\001\002\000\004\051\107\001\002" +
    "\000\016\021\014\052\026\053\020\054\017\055\033\056" +
    "\016\001\002\000\022\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\076\051\uffe6\001\002\000\024\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\022\uffec" +
    "\030\uffec\051\uffec\001\002\000\030\002\ufffb\021\ufffb\036" +
    "\ufffb\041\ufffb\042\ufffb\050\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\001\002\000\016\021\014\052\026\053" +
    "\020\054\017\055\033\056\016\001\002\000\016\021\014" +
    "\052\026\053\020\054\017\055\033\056\016\001\002\000" +
    "\004\002\057\001\002\000\024\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\022\uffe7\030\uffe7\051\uffe7\001" +
    "\002\000\024\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\022\uffe8\030\uffe8\051\uffe8\001\002\000\024\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\022\uffe9" +
    "\030\uffe9\051\uffe9\001\002\000\026\002\001\021\014\036" +
    "\013\041\007\042\027\052\026\053\020\054\017\055\010" +
    "\056\016\001\002\000\012\004\053\005\054\030\uffe4\051" +
    "\uffe4\001\002\000\022\004\ufff3\005\ufff3\006\045\007\044" +
    "\010\043\022\ufff3\030\ufff3\051\ufff3\001\002\000\030\002" +
    "\ufffa\021\ufffa\036\ufffa\041\ufffa\042\ufffa\050\ufffa\052\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000\030\002" +
    "\ufff8\021\ufff8\036\ufff8\041\ufff8\042\ufff8\050\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000\024\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\022\uffea" +
    "\030\uffea\051\uffea\001\002\000\004\055\031\001\002\000" +
    "\030\002\uffff\021\uffff\036\uffff\041\uffff\042\uffff\050\uffff" +
    "\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\001\002\000" +
    "\004\043\032\001\002\000\016\021\014\052\026\053\020" +
    "\054\017\055\033\056\016\001\002\000\024\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\022\uffe6\030\uffe6" +
    "\051\uffe6\001\002\000\004\030\035\001\002\000\004\051" +
    "\036\001\002\000\004\047\037\001\002\000\024\021\014" +
    "\036\013\041\007\042\027\052\026\053\020\054\017\055" +
    "\010\056\016\001\002\000\026\021\014\036\013\041\007" +
    "\042\027\050\041\052\026\053\020\054\017\055\010\056" +
    "\016\001\002\000\030\002\ufff4\021\ufff4\036\ufff4\041\ufff4" +
    "\042\ufff4\050\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\001\002\000\030\002\ufffe\021\ufffe\036\ufffe\041\ufffe" +
    "\042\ufffe\050\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\001\002\000\016\021\014\052\026\053\020\054\017" +
    "\055\033\056\016\001\002\000\016\021\014\052\026\053" +
    "\020\054\017\055\033\056\016\001\002\000\016\021\014" +
    "\052\026\053\020\054\017\055\033\056\016\001\002\000" +
    "\024\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\047" +
    "\022\uffef\030\uffef\051\uffef\001\002\000\016\021\014\052" +
    "\026\053\020\054\017\055\033\056\016\001\002\000\024" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\022" +
    "\uffeb\030\uffeb\051\uffeb\001\002\000\024\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\011\047\022\uffee\030\uffee\051" +
    "\uffee\001\002\000\024\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\047\022\uffed\030\uffed\051\uffed\001\002\000" +
    "\016\021\014\052\026\053\020\054\017\055\033\056\016" +
    "\001\002\000\016\021\014\052\026\053\020\054\017\055" +
    "\033\056\016\001\002\000\022\004\ufff1\005\ufff1\006\045" +
    "\007\044\010\043\022\ufff1\030\ufff1\051\ufff1\001\002\000" +
    "\022\004\ufff2\005\ufff2\006\045\007\044\010\043\022\ufff2" +
    "\030\ufff2\051\ufff2\001\002\000\004\002\000\001\002\000" +
    "\010\004\053\005\054\022\061\001\002\000\024\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\022\uffe5\030" +
    "\uffe5\051\uffe5\001\002\000\004\030\063\001\002\000\004" +
    "\051\064\001\002\000\004\047\065\001\002\000\024\021" +
    "\014\036\013\041\007\042\027\052\026\053\020\054\017" +
    "\055\010\056\016\001\002\000\026\021\014\036\013\041" +
    "\007\042\027\050\067\052\026\053\020\054\017\055\010" +
    "\056\016\001\002\000\032\002\ufff7\021\ufff7\036\ufff7\040" +
    "\070\041\ufff7\042\ufff7\050\ufff7\052\ufff7\053\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\001\002\000\004\030\071\001\002\000" +
    "\004\051\072\001\002\000\004\047\073\001\002\000\024" +
    "\021\014\036\013\041\007\042\027\052\026\053\020\054" +
    "\017\055\010\056\016\001\002\000\026\021\014\036\013" +
    "\041\007\042\027\050\075\052\026\053\020\054\017\055" +
    "\010\056\016\001\002\000\030\002\ufff6\021\ufff6\036\ufff6" +
    "\041\ufff6\042\ufff6\050\ufff6\052\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\001\002\000\016\021\014\052\026\053\020" +
    "\054\017\055\033\056\016\001\002\000\010\004\053\005" +
    "\054\051\100\001\002\000\030\002\ufffc\021\ufffc\036\ufffc" +
    "\041\ufffc\042\ufffc\050\ufffc\052\ufffc\053\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\001\002\000\004\030\102\001\002\000\004" +
    "\051\103\001\002\000\004\047\104\001\002\000\024\021" +
    "\014\036\013\041\007\042\027\052\026\053\020\054\017" +
    "\055\010\056\016\001\002\000\026\021\014\036\013\041" +
    "\007\042\027\050\106\052\026\053\020\054\017\055\010" +
    "\056\016\001\002\000\030\002\ufff5\021\ufff5\036\ufff5\041" +
    "\ufff5\042\ufff5\050\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\001\002\000\030\002\ufffd\021\ufffd\036\ufffd\041" +
    "\ufffd\042\ufffd\050\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\032\002\014\003\020\004\027\005\005\011" +
    "\023\012\004\013\024\014\011\017\021\020\022\021\003" +
    "\022\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\100\017\021\020\022\021\003" +
    "\022\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\061\017\021\020\022\021\003" +
    "\022\010\001\001\000\012\017\057\020\022\021\003\022" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\041\005\005\011" +
    "\023\012\004\013\024\014\011\017\021\020\022\021\003" +
    "\022\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\033\017\021\020\022\021\003\022\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\037\004\027\005\005\011\023\012\004" +
    "\013\024\014\011\017\021\020\022\021\003\022\010\001" +
    "\001\000\026\004\041\005\005\011\023\012\004\013\024" +
    "\014\011\017\021\020\022\021\003\022\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\051\022\010" +
    "\001\001\000\006\021\050\022\010\001\001\000\006\021" +
    "\045\022\010\001\001\000\002\001\001\000\004\022\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\055\021\003\022\010\001\001\000\010" +
    "\020\054\021\003\022\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\065\004\027\005\005\011\023\012\004" +
    "\013\024\014\011\017\021\020\022\021\003\022\010\001" +
    "\001\000\026\004\041\005\005\011\023\012\004\013\024" +
    "\014\011\017\021\020\022\021\003\022\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\073\004\027\005\005\011\023\012" +
    "\004\013\024\014\011\017\021\020\022\021\003\022\010" +
    "\001\001\000\026\004\041\005\005\011\023\012\004\013" +
    "\024\014\011\017\021\020\022\021\003\022\010\001\001" +
    "\000\002\001\001\000\012\017\076\020\022\021\003\022" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\104\004\027\005\005\011\023\012\004\013\024\014\011" +
    "\017\021\020\022\021\003\022\010\001\001\000\026\004" +
    "\041\005\005\011\023\012\004\013\024\014\011\017\021" +
    "\020\022\021\003\022\010\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Error handling methods
    public void report_error(String message, Object info) {
        StringBuilder errorMsg = new StringBuilder("Error: " + message);
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s.left >= 0) {
                errorMsg.append(" at line " + (s.left + 1));
                if (s.right >= 0) {
                    errorMsg.append(", column " + (s.right + 1));
                }
            }
        }
        syntaxErrors.add(errorMsg.toString());
    }
    
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error", cur_token);
    }
    
    // Symbol table and type checking
    private SymbolTable symbolTable = new SymbolTable();
    private List<String> syntaxErrors = new ArrayList<>();
    private List<String> semanticErrors = new ArrayList<>();
    
    public List<String> getSyntaxErrors() {
        return syntaxErrors;
    }
    
    public List<String> getSemanticErrors() {
        return semanticErrors;
    }
    
    // Add semantic error
    public void addSemanticError(String message, int line, int column) {
        semanticErrors.add("Error at line " + line + ", column " + column + ": " + message);
    }
    
    // Check indentation
    private int expectedIndent = 0;
    private Stack<Integer> indentStack = new Stack<>();
    
    public void checkIndentation(int spaces, int line) {
        if (spaces % 4 != 0) {
            semanticErrors.add("Error at line " + line + ": Indentation should be a multiple of 4 spaces");
        }
        
        int level = spaces / 4;
        if (level > expectedIndent) {
            // Indent should only increase by 1 level at a time
            if (level != expectedIndent + 1) {
                semanticErrors.add("Error at line " + line + ": Indentation increased by more than one level");
            }
            indentStack.push(expectedIndent);
            expectedIndent = level;
        } else if (level < expectedIndent) {
            // Check if dedent goes back to a valid level
            boolean validDedent = false;
            while (!indentStack.isEmpty()) {
                int prevIndent = indentStack.pop();
                if (prevIndent == level) {
                    validDedent = true;
                    break;
                }
            }
            if (!validDedent) {
                semanticErrors.add("Error at line " + line + ": Invalid dedent level");
            }
            expectedIndent = level;
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmts ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= stmts stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= expr NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= IDENTIFIER ASSIGN expr_with_type NEWLINE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PythonSymbol e = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
           symbolTable.put(id, e.type); 
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= compound_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // if_stmt ::= IF expr COLON NEWLINE INDENT stmts DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // if_stmt ::= IF expr COLON NEWLINE INDENT stmts DEDENT ELSE COLON NEWLINE INDENT stmts DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // while_stmt ::= WHILE expr COLON NEWLINE INDENT stmts DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // for_stmt ::= FOR IDENTIFIER IN expr COLON NEWLINE INDENT stmts DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr_with_type ::= term_with_type 
            {
              PythonSymbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PythonSymbol t = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_with_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr_with_type ::= expr_with_type PLUS term_with_type 
            {
              PythonSymbol RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PythonSymbol e1 = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PythonSymbol e2 = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     if (!e1.type.isCompatible(e2.type)) {
                         parser.addSemanticError("Type mismatch: cannot add " + e1.type + " and " + e2.type, e1.line, e1.column);
                         RESULT = new PythonSymbol(e1.value + "+" + e2.value, new Type("error"), e1.line, e1.column);
                     } else {
                         Type resultType = e1.type.getResultType(e2.type, "+");
                         RESULT = new PythonSymbol(e1.value + "+" + e2.value, resultType, e1.line, e1.column);
                     }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_with_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr_with_type ::= expr_with_type MINUS term_with_type 
            {
              PythonSymbol RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PythonSymbol e1 = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PythonSymbol e2 = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     if (!e1.type.isCompatible(e2.type)) {
                         parser.addSemanticError("Type mismatch: cannot subtract " + e2.type + " from " + e1.type, e1.line, e1.column);
                         RESULT = new PythonSymbol(e1.value + "-" + e2.value, new Type("error"), e1.line, e1.column);
                     } else {
                         Type resultType = e1.type.getResultType(e2.type, "-");
                         RESULT = new PythonSymbol(e1.value + "-" + e2.value, resultType, e1.line, e1.column);
                     }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_with_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term_with_type ::= factor_with_type 
            {
              PythonSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PythonSymbol f = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_with_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term_with_type ::= term_with_type TIMES factor_with_type 
            {
              PythonSymbol RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PythonSymbol t1 = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PythonSymbol t2 = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     if (!t1.type.isCompatible(t2.type)) {
                         parser.addSemanticError("Type mismatch: cannot multiply " + t1.type + " and " + t2.type, t1.line, t1.column);
                         RESULT = new PythonSymbol(t1.value + "*" + t2.value, new Type("error"), t1.line, t1.column);
                     } else {
                         Type resultType = t1.type.getResultType(t2.type, "*");
                         RESULT = new PythonSymbol(t1.value + "*" + t2.value, resultType, t1.line, t1.column);
                     }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_with_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term_with_type ::= term_with_type DIVIDE factor_with_type 
            {
              PythonSymbol RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PythonSymbol t1 = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PythonSymbol t2 = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     if (!t1.type.isCompatible(t2.type)) {
                         parser.addSemanticError("Type mismatch: cannot divide " + t1.type + " by " + t2.type, t1.line, t1.column);
                         RESULT = new PythonSymbol(t1.value + "/" + t2.value, new Type("error"), t1.line, t1.column);
                     } else {
                         Type resultType = t1.type.getResultType(t2.type, "/");
                         RESULT = new PythonSymbol(t1.value + "/" + t2.value, resultType, t1.line, t1.column);
                     }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_with_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term_with_type ::= term_with_type MODULO factor_with_type 
            {
              PythonSymbol RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PythonSymbol t1 = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PythonSymbol t2 = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     if (!t1.type.isCompatible(t2.type)) {
                         parser.addSemanticError("Type mismatch: cannot calculate modulo of " + t1.type + " and " + t2.type, t1.line, t1.column);
                         RESULT = new PythonSymbol(t1.value + "%" + t2.value, new Type("error"), t1.line, t1.column);
                     } else {
                         Type resultType = t1.type.getResultType(t2.type, "%");
                         RESULT = new PythonSymbol(t1.value + "%" + t2.value, resultType, t1.line, t1.column);
                     }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_with_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor_with_type ::= atom_with_type 
            {
              PythonSymbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PythonSymbol a = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_with_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor_with_type ::= factor_with_type POWER atom_with_type 
            {
              PythonSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PythonSymbol f = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PythonSymbol a = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                       if (!f.type.isCompatible(a.type)) {
                           parser.addSemanticError("Type mismatch: cannot raise " + f.type + " to power of " + a.type, f.line, f.column);
                           RESULT = new PythonSymbol(f.value + "**" + a.value, new Type("error"), f.line, f.column);
                       } else {
                           Type resultType = f.type.getResultType(a.type, "**");
                           RESULT = new PythonSymbol(f.value + "**" + a.value, resultType, f.line, f.column);
                       }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_with_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atom_with_type ::= INTEGER 
            {
              PythonSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PythonSymbol(i, new Type("int"), ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_with_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atom_with_type ::= FLOAT 
            {
              PythonSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PythonSymbol(f, new Type("float"), fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_with_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atom_with_type ::= STRING 
            {
              PythonSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PythonSymbol(s, new Type("string"), sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_with_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atom_with_type ::= BOOLEAN 
            {
              PythonSymbol RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PythonSymbol(b, new Type("boolean"), bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_with_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // atom_with_type ::= IDENTIFIER 
            {
              PythonSymbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     Type type = symbolTable.get(id);
                     if (type == null) {
                         parser.addSemanticError("Undefined variable: " + id, idleft, idright);
                         RESULT = new PythonSymbol(id, new Type("unknown"), idleft, idright);
                     } else {
                         RESULT = new PythonSymbol(id, type, idleft, idright);
                     }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_with_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atom_with_type ::= LPAREN expr_with_type RPAREN 
            {
              PythonSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PythonSymbol e = (PythonSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_with_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr_with_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_list ::= expr_list COMMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // param_list ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param_list ::= param_list COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
