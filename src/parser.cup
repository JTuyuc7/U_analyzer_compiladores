import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.Symbol;
parser code {:
    public static Map<String, String> tablaSimbolos = new HashMap<>();
    // Variable para seguir si hay errores de tipo
    public static boolean tieneErroresTipo = false;
    
    public void syntax_error(Symbol cur_token) {
        System.err.println("Error de sintaxis en línea: " + 
            (cur_token.value instanceof Token ? ((Token)cur_token.value).linea : "desconocida") + 
            ", columna: " + 
            (cur_token.value instanceof Token ? ((Token)cur_token.value).columna : "desconocida") +
            ". Token inesperado: " + 
            (cur_token.value instanceof Token ? ((Token)cur_token.value).valor : cur_token.value));
    }
    
    public void report_error(String message, Object info) {
        System.err.println("Error: " + message);
    }
    
    // Resetear el estado antes de cada análisis
    public static void reset() {
        tablaSimbolos.clear();
        tieneErroresTipo = false;
    }
:};

/* Define how to connect to the scanner */
init with {: Parser.reset(); :};
scan with {: return getScanner().next_token(); :};

// ---------------------------------------------
// TERMINALES: deben coincidir con tu .flex
// ---------------------------------------------
terminal Token ID,
IF,
ELSE,
ERROR,
NUM,
FLOAT,
STRING,
COMMENT,
DEF,
RETURN,
COLON,
NEWLINE,
INDENT,
DEDENT,
PLUS,
MINUS,
MULT,
DIV,
ASSIGN,
LPAREN,
RPAREN;


// ---------------------------------------------
// NO TERMINALES
// ---------------------------------------------
non terminal prog, stmt_list, stmt;
non terminal Nodo expr;

// ---------------------------------------------
// PRECEDENCIAS
// ---------------------------------------------
precedence left PLUS, MINUS;
precedence left MULT, DIV;

// ---------------------------------------------
// INICIO
// ---------------------------------------------
start with prog;

// ---------------------------------------------
// PRODUCCIONES
// ---------------------------------------------

prog ::= stmt_list
       {:
          if (Parser.tieneErroresTipo) {
              System.out.println("❌ Análisis completado con errores de tipo.");
          } else {
              System.out.println("✅ Análisis completado sin errores.");
          }
       :};

stmt_list ::= stmt_list NEWLINE stmt
            {:
                // Lista de sentencias que continúa
            :}
            | stmt
            {:
                // Una sola sentencia
            :};

stmt ::= ID:id ASSIGN expr:val
       {:
          Parser.tablaSimbolos.put(id.valor.toString(), val.tipo);
          System.out.println("Asignación: " + id.valor + " = " + val.valor + " (tipo: " + val.tipo + ")");
          
          // Si hay un error en la expresión, reportarlo
          if (val.tipo.equals("error")) {
              System.err.println("❌ Error de tipo en la asignación a '" + id.valor + "'");
              Parser.tieneErroresTipo = true;
          }
       :}
       | error
       {:
          System.err.println("❌ Error de sintaxis: Sentencia inválida");
       :};

expr ::= expr:izq PLUS expr:der
      {:
         System.out.println("DEBUG: Operación SUMA: " + izq.valor + " + " + der.valor);
         System.out.println("DEBUG: Tipos: " + izq.tipo + " y " + der.tipo);
         
         // Verifica si alguno de los operandos ya tiene un error
         if (izq.tipo.equals("error") || der.tipo.equals("error")) {
             RESULT = new Nodo("error", izq.valor + "+" + der.valor);
             System.err.println("❌ Error: no se puede realizar la suma debido a operandos inválidos");
             Parser.tieneErroresTipo = true;
         }
         // Verifica si los operandos son numéricos
         else if (!izq.tipo.equals("int") && !izq.tipo.equals("float")) {
             System.err.println("❌ Error: operando izquierdo de suma debe ser numérico, es " + izq.tipo);
             RESULT = new Nodo("error", izq.valor + "+" + der.valor);
             Parser.tieneErroresTipo = true;
         } 
         else if (!der.tipo.equals("int") && !der.tipo.equals("float")) {
             System.err.println("❌ Error: operando derecho de suma debe ser numérico, es " + der.tipo);
             RESULT = new Nodo("error", izq.valor + "+" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         // Si ambos son numéricos pero de diferente tipo, aplicar conversión implícita
         else if (!izq.tipo.equals(der.tipo)) {
             System.out.println("⚠️ Advertencia: conversión implícita entre " + izq.tipo + " y " + der.tipo);
             RESULT = new Nodo("float", izq.valor + "+" + der.valor);
         } 
         // Si ambos son del mismo tipo numérico, mantener ese tipo
         else {
             RESULT = new Nodo(izq.tipo, izq.valor + "+" + der.valor);
         }
      :}
      | expr:izq MINUS expr:der
      {:
         System.out.println("DEBUG: Operación RESTA: " + izq.valor + " - " + der.valor);
         System.out.println("DEBUG: Tipos: " + izq.tipo + " y " + der.tipo);
         
         // Verifica si alguno de los operandos ya tiene un error
         if (izq.tipo.equals("error") || der.tipo.equals("error")) {
             RESULT = new Nodo("error", izq.valor + "-" + der.valor);
             System.err.println("❌ Error: no se puede realizar la resta debido a operandos inválidos");
             Parser.tieneErroresTipo = true;
         }
         // Verifica si los operandos son numéricos
         else if (!izq.tipo.equals("int") && !izq.tipo.equals("float")) {
             System.err.println("❌ Error: operando izquierdo de resta debe ser numérico, es " + izq.tipo);
             RESULT = new Nodo("error", izq.valor + "-" + der.valor);
             Parser.tieneErroresTipo = true;
         } 
         else if (!der.tipo.equals("int") && !der.tipo.equals("float")) {
             System.err.println("❌ Error: operando derecho de resta debe ser numérico, es " + der.tipo);
             RESULT = new Nodo("error", izq.valor + "-" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         // Si ambos son numéricos pero de diferente tipo, aplicar conversión implícita
         else if (!izq.tipo.equals(der.tipo)) {
             System.out.println("⚠️ Advertencia: conversión implícita entre " + izq.tipo + " y " + der.tipo);
             RESULT = new Nodo("float", izq.valor + "-" + der.valor);
         } 
         // Si ambos son del mismo tipo numérico, mantener ese tipo
         else {
             RESULT = new Nodo(izq.tipo, izq.valor + "-" + der.valor);
         }
      :}
      | expr:izq MULT expr:der
      {:
         System.out.println("DEBUG: Operación MULTIPLICACIÓN: " + izq.valor + " * " + der.valor);
         System.out.println("DEBUG: Tipos: " + izq.tipo + " y " + der.tipo);
         
         // Verifica si alguno de los operandos ya tiene un error
         if (izq.tipo.equals("error") || der.tipo.equals("error")) {
             RESULT = new Nodo("error", izq.valor + "*" + der.valor);
             System.err.println("❌ Error: no se puede realizar la multiplicación debido a operandos inválidos");
             Parser.tieneErroresTipo = true;
         }
         // Verifica si los operandos son numéricos
         else if (!izq.tipo.equals("int") && !izq.tipo.equals("float")) {
             System.err.println("❌ Error: operando izquierdo de multiplicación debe ser numérico, es " + izq.tipo);
             RESULT = new Nodo("error", izq.valor + "*" + der.valor);
             Parser.tieneErroresTipo = true;
         } 
         else if (!der.tipo.equals("int") && !der.tipo.equals("float")) {
             System.err.println("❌ Error: operando derecho de multiplicación debe ser numérico, es " + der.tipo);
             RESULT = new Nodo("error", izq.valor + "*" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         // Si ambos son numéricos pero de diferente tipo, aplicar conversión implícita
         else if (!izq.tipo.equals(der.tipo)) {
             System.out.println("⚠️ Advertencia: conversión implícita entre " + izq.tipo + " y " + der.tipo);
             RESULT = new Nodo("float", izq.valor + "*" + der.valor);
         } 
         // Si ambos son del mismo tipo numérico, mantener ese tipo
         else {
             RESULT = new Nodo(izq.tipo, izq.valor + "*" + der.valor);
         }
      :}
      | expr:izq DIV expr:der
      {:
         System.out.println("DEBUG: Operación DIVISIÓN: " + izq.valor + " / " + der.valor);
         System.out.println("DEBUG: Tipos: " + izq.tipo + " y " + der.tipo);
         
         // Verifica si alguno de los operandos ya tiene un error
         if (izq.tipo.equals("error") || der.tipo.equals("error")) {
             RESULT = new Nodo("error", izq.valor + "/" + der.valor);
             System.err.println("❌ Error: no se puede realizar la división debido a operandos inválidos");
             Parser.tieneErroresTipo = true;
         }
         // Verifica si los operandos son numéricos
         else if (!izq.tipo.equals("int") && !izq.tipo.equals("float")) {
             System.err.println("❌ Error: operando izquierdo de división debe ser numérico, es " + izq.tipo);
             RESULT = new Nodo("error", izq.valor + "/" + der.valor);
             Parser.tieneErroresTipo = true;
         } 
         else if (!der.tipo.equals("int") && !der.tipo.equals("float")) {
             System.err.println("❌ Error: operando derecho de división debe ser numérico, es " + der.tipo);
             RESULT = new Nodo("error", izq.valor + "/" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         // Si ambos son numéricos pero de diferente tipo, aplicar conversión implícita
         else if (!izq.tipo.equals(der.tipo)) {
             System.out.println("⚠️ Advertencia: conversión implícita entre " + izq.tipo + " y " + der.tipo);
             RESULT = new Nodo("float", izq.valor + "/" + der.valor);
         } 
         // Si ambos son del mismo tipo numérico, siempre retornar float (división en Python)
         else {
             RESULT = new Nodo("float", izq.valor + "/" + der.valor);
         }
      :}
      | LPAREN expr:e RPAREN
      {:
          System.out.println("DEBUG: Expresión entre paréntesis: (" + e.valor + ")");
          RESULT = e;
      :}
      | NUM:num
      {: 
         System.out.println("DEBUG: Número entero: " + num.valor);
         RESULT = new Nodo("int", num.valor); 
      :}
      | FLOAT:flt
      {: 
         System.out.println("DEBUG: Número flotante: " + flt.valor);
         RESULT = new Nodo("float", flt.valor); 
      :}
      | STRING:str
      {: 
         System.out.println("DEBUG: String: " + str.valor);
         RESULT = new Nodo("string", str.valor); 
      :}
      | ID:id
      {:
         String nombre = id.valor.toString();
         String tipo = Parser.tablaSimbolos.get(nombre);
         System.out.println("DEBUG: Variable: " + nombre + " de tipo: " + (tipo != null ? tipo : "no definido"));

         if (tipo == null) {
             System.err.println("❌ Error: variable '" + nombre + "' no está definida.");
             Parser.tieneErroresTipo = true;
             RESULT = new Nodo("error", nombre);
         } else {
             RESULT = new Nodo(tipo, nombre);
         }
      :}
      | error
      {:
          System.err.println("❌ Error de sintaxis: Expresión inválida");
          Parser.tieneErroresTipo = true;
          RESULT = new Nodo("error", "expr_error");
      :};
