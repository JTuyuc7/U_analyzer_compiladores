// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/PythonLexer.flex

import java_cup.runtime.*;
import java.awt.Color;
import java.util.Stack;
import java.util.LinkedList;
import java.util.Queue;


@SuppressWarnings("fallthrough")
class PythonLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int INDENT_CHECK = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\0\1\11\2\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23"+
    "\1\24\1\25\1\26\1\27\1\30\2\0\4\31\1\32"+
    "\1\33\7\31\1\34\5\31\1\35\6\31\1\36\1\37"+
    "\1\40\1\0\1\31\1\0\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\31\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\31\1\60\1\61\1\62"+
    "\1\63\1\31\1\64\1\65\1\66\1\31\1\67\1\0"+
    "\1\70\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\1\1\3\1\4\1\3\2\2"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\2\17\1\20\1\21\1\22\1\23\1\24"+
    "\4\25\1\26\1\27\20\25\1\30\1\31\1\32\1\0"+
    "\1\33\1\0\2\5\1\34\1\35\1\36\1\34\2\0"+
    "\2\37\1\40\1\41\1\42\4\25\1\43\12\25\1\44"+
    "\1\25\1\45\1\43\2\25\1\46\7\25\1\33\3\0"+
    "\1\47\3\25\1\50\4\25\1\51\4\25\1\52\5\25"+
    "\1\53\6\25\2\0\1\54\4\25\1\55\1\56\10\25"+
    "\1\0\1\25\1\57\6\25\1\60\1\33\1\25\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\162\0\162\0\344\0\u011d"+
    "\0\u0156\0\u018f\0\u01c8\0\162\0\162\0\u0201\0\u01c8\0\162"+
    "\0\u01c8\0\u023a\0\u0273\0\u02ac\0\u02e5\0\162\0\162\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\162\0\162"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\162\0\162\0\162\0\u083d\0\u0876\0\u08af\0\162\0\u08e8"+
    "\0\162\0\u01c8\0\u0921\0\u01c8\0\u023a\0\u095a\0\u0993\0\u09cc"+
    "\0\162\0\162\0\162\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u03c9\0\u0d5c\0\u03c9\0\u03c9\0\u0d95\0\u0dce"+
    "\0\u03c9\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\162\0\u0f96\0\u0fcf\0\u1008\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u03c9\0\u10ec\0\u1125\0\u115e\0\u1197\0\u03c9\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u03c9\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u03c9\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u03c9\0\u1599\0\u15d2\0\u160b\0\u1644\0\u03c9\0\u03c9"+
    "\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u03c9\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b"+
    "\0\u19d4\0\u03c9\0\u1845\0\u1a0d\0\u03c9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\33\1\34\1\35\1\36\1\37\1\3\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\33"+
    "\1\50\1\33\1\51\1\33\1\52\1\53\1\54\1\55"+
    "\1\33\1\56\1\33\1\57\1\33\1\60\1\61\1\62"+
    "\1\3\1\6\2\3\1\6\1\3\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\33\1\34\1\35\1\36\1\37\1\3\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\33\1\50"+
    "\1\33\1\51\1\33\1\52\1\53\1\54\1\55\1\33"+
    "\1\56\1\33\1\57\1\33\1\60\1\61\1\62\72\0"+
    "\1\4\71\0\1\5\115\0\1\63\41\0\2\64\1\0"+
    "\2\64\1\0\1\64\1\65\27\64\1\66\31\64\2\12"+
    "\1\67\2\12\1\70\63\12\27\0\1\71\55\0\1\72"+
    "\12\0\1\71\63\0\2\73\66\0\1\74\5\0\1\71"+
    "\61\0\1\75\1\0\2\76\5\0\1\77\1\100\3\77"+
    "\3\0\4\77\1\100\21\77\22\0\1\75\1\0\2\25"+
    "\5\0\1\77\1\100\3\77\3\0\4\77\1\100\21\77"+
    "\31\0\1\101\70\0\1\102\70\0\1\103\63\0\2\33"+
    "\5\0\5\33\3\0\26\33\24\0\2\33\5\0\5\33"+
    "\3\0\1\104\25\33\24\0\2\33\5\0\5\33\3\0"+
    "\15\33\1\105\10\33\24\0\2\33\5\0\5\33\3\0"+
    "\17\33\1\106\6\33\24\0\2\33\5\0\5\33\3\0"+
    "\14\33\1\107\3\33\1\110\5\33\24\0\2\33\5\0"+
    "\5\33\3\0\17\33\1\111\6\33\24\0\2\33\5\0"+
    "\5\33\3\0\12\33\1\112\2\33\1\113\10\33\24\0"+
    "\2\33\5\0\5\33\3\0\4\33\1\114\21\33\24\0"+
    "\2\33\5\0\5\33\3\0\12\33\1\115\11\33\1\116"+
    "\1\33\24\0\2\33\5\0\5\33\3\0\10\33\1\117"+
    "\4\33\1\120\1\33\1\121\6\33\24\0\2\33\5\0"+
    "\5\33\3\0\12\33\1\122\13\33\24\0\2\33\5\0"+
    "\5\33\3\0\5\33\1\123\5\33\1\124\1\125\3\33"+
    "\1\126\5\33\24\0\2\33\5\0\5\33\3\0\1\127"+
    "\25\33\24\0\2\33\5\0\5\33\3\0\15\33\1\130"+
    "\10\33\24\0\2\33\5\0\5\33\3\0\17\33\1\131"+
    "\6\33\24\0\2\33\5\0\5\33\3\0\1\132\25\33"+
    "\24\0\2\33\5\0\5\33\3\0\1\133\3\33\1\134"+
    "\21\33\24\0\2\33\5\0\5\33\3\0\17\33\1\135"+
    "\6\33\24\0\2\33\5\0\5\33\3\0\7\33\1\136"+
    "\1\137\15\33\24\0\2\33\5\0\5\33\3\0\10\33"+
    "\1\140\15\33\2\0\2\64\1\0\2\64\1\0\1\64"+
    "\1\141\27\64\1\66\31\64\7\0\1\142\61\0\2\64"+
    "\4\0\63\64\2\0\1\67\110\0\2\73\6\0\1\143"+
    "\12\0\1\143\45\0\2\76\5\0\5\77\3\0\26\77"+
    "\33\0\5\77\3\0\26\77\17\0\1\144\1\0\1\144"+
    "\2\0\2\145\5\0\5\77\3\0\26\77\24\0\2\33"+
    "\5\0\5\33\3\0\12\33\1\146\13\33\24\0\2\33"+
    "\5\0\5\33\3\0\14\33\1\147\11\33\24\0\2\33"+
    "\5\0\5\33\3\0\22\33\1\150\3\33\24\0\2\33"+
    "\5\0\5\33\3\0\3\33\1\151\22\33\24\0\2\33"+
    "\5\0\5\33\3\0\20\33\1\152\5\33\24\0\2\33"+
    "\5\0\5\33\3\0\4\33\1\153\21\33\24\0\2\33"+
    "\5\0\5\33\3\0\1\154\25\33\24\0\2\33\5\0"+
    "\5\33\3\0\14\33\1\155\11\33\24\0\2\33\5\0"+
    "\5\33\3\0\5\33\1\156\4\33\1\126\13\33\24\0"+
    "\2\33\5\0\5\33\3\0\10\33\1\157\7\33\1\160"+
    "\5\33\24\0\2\33\5\0\5\33\3\0\2\33\1\161"+
    "\23\33\24\0\2\33\5\0\5\33\3\0\14\33\1\162"+
    "\11\33\24\0\2\33\5\0\5\33\3\0\17\33\1\163"+
    "\6\33\24\0\2\33\5\0\5\33\3\0\15\33\1\164"+
    "\10\33\24\0\2\33\5\0\5\33\3\0\15\33\1\165"+
    "\10\33\24\0\2\33\5\0\5\33\3\0\16\33\1\166"+
    "\7\33\24\0\2\33\5\0\5\33\3\0\13\33\1\167"+
    "\12\33\24\0\2\33\5\0\5\33\3\0\14\33\1\170"+
    "\4\33\1\171\4\33\24\0\2\33\5\0\5\33\3\0"+
    "\20\33\1\172\5\33\24\0\2\33\5\0\5\33\3\0"+
    "\10\33\1\173\15\33\24\0\2\33\5\0\5\33\3\0"+
    "\21\33\1\174\4\33\24\0\2\33\5\0\5\33\3\0"+
    "\25\33\1\126\24\0\2\33\5\0\5\33\3\0\10\33"+
    "\1\175\15\33\24\0\2\33\5\0\5\33\3\0\21\33"+
    "\1\176\4\33\24\0\2\33\5\0\5\33\3\0\4\33"+
    "\1\177\21\33\2\0\7\142\1\200\27\142\1\201\31\142"+
    "\15\0\1\144\1\0\1\144\2\0\2\145\67\0\2\145"+
    "\67\0\2\33\5\0\5\33\3\0\20\33\1\150\5\33"+
    "\24\0\2\33\5\0\5\33\3\0\4\33\1\126\21\33"+
    "\24\0\2\33\5\0\5\33\3\0\4\33\1\202\21\33"+
    "\24\0\2\33\5\0\5\33\3\0\4\33\1\203\21\33"+
    "\24\0\2\33\5\0\5\33\3\0\1\204\25\33\24\0"+
    "\2\33\5\0\5\33\3\0\20\33\1\205\5\33\24\0"+
    "\2\33\5\0\5\33\3\0\21\33\1\206\4\33\24\0"+
    "\2\33\5\0\5\33\3\0\5\33\1\207\20\33\24\0"+
    "\2\33\5\0\5\33\3\0\4\33\1\210\21\33\24\0"+
    "\2\33\5\0\5\33\3\0\4\33\1\211\21\33\24\0"+
    "\2\33\5\0\5\33\3\0\1\212\25\33\24\0\2\33"+
    "\5\0\5\33\3\0\13\33\1\126\12\33\24\0\2\33"+
    "\5\0\5\33\3\0\1\33\1\213\24\33\24\0\2\33"+
    "\5\0\5\33\3\0\15\33\1\203\10\33\24\0\2\33"+
    "\5\0\5\33\3\0\1\33\1\214\24\33\24\0\2\33"+
    "\5\0\5\33\3\0\12\33\1\215\13\33\24\0\2\33"+
    "\5\0\5\33\3\0\20\33\1\126\5\33\24\0\2\33"+
    "\5\0\5\33\3\0\20\33\1\147\5\33\24\0\2\33"+
    "\5\0\5\33\3\0\22\33\1\216\3\33\24\0\2\33"+
    "\5\0\5\33\3\0\12\33\1\217\13\33\24\0\2\33"+
    "\5\0\5\33\3\0\7\33\1\126\16\33\24\0\2\33"+
    "\5\0\5\33\3\0\12\33\1\220\13\33\2\0\7\142"+
    "\1\221\27\142\1\201\33\142\4\0\63\142\22\0\2\33"+
    "\5\0\5\33\3\0\17\33\1\222\6\33\24\0\2\33"+
    "\5\0\5\33\3\0\11\33\1\126\14\33\24\0\2\33"+
    "\5\0\5\33\3\0\20\33\1\223\5\33\24\0\2\33"+
    "\5\0\5\33\3\0\10\33\1\224\15\33\24\0\2\33"+
    "\5\0\5\33\3\0\16\33\1\222\7\33\24\0\2\33"+
    "\5\0\5\33\3\0\12\33\1\225\13\33\24\0\2\33"+
    "\5\0\5\33\3\0\1\226\25\33\24\0\2\33\5\0"+
    "\5\33\3\0\3\33\1\227\22\33\24\0\2\33\5\0"+
    "\5\33\3\0\15\33\1\230\10\33\24\0\2\33\5\0"+
    "\5\33\3\0\17\33\1\231\6\33\24\0\2\33\5\0"+
    "\5\33\3\0\4\33\1\232\21\33\24\0\2\33\5\0"+
    "\5\33\3\0\3\33\1\126\22\33\2\0\7\142\1\233"+
    "\27\142\1\201\31\142\22\0\2\33\5\0\5\33\3\0"+
    "\21\33\1\126\4\33\24\0\2\33\5\0\5\33\3\0"+
    "\14\33\1\234\11\33\24\0\2\33\5\0\5\33\3\0"+
    "\12\33\1\135\13\33\24\0\2\33\5\0\5\33\3\0"+
    "\12\33\1\126\13\33\24\0\2\33\5\0\5\33\3\0"+
    "\1\126\25\33\24\0\2\33\5\0\5\33\3\0\2\33"+
    "\1\213\23\33\24\0\2\33\5\0\5\33\3\0\14\33"+
    "\1\235\11\33\24\0\2\33\5\0\5\33\3\0\22\33"+
    "\1\147\3\33\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6726];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\1\1\2\11\5\1\2\11\2\1"+
    "\1\11\5\1\2\11\7\1\2\11\20\1\3\11\1\0"+
    "\1\1\1\0\1\11\1\1\1\11\3\1\2\0\2\1"+
    "\3\11\35\1\1\11\3\0\33\1\2\0\17\1\1\0"+
    "\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    // Token colors for syntax highlighting
    private static final Color KEYWORD_COLOR = new Color(147, 199, 99);    // Green
    private static final Color OPERATOR_COLOR = new Color(103, 140, 177);  // Blue
    private static final Color STRING_COLOR = new Color(214, 157, 133);    // Orange
    private static final Color COMMENT_COLOR = new Color(128, 128, 128);   // Gray
    private static final Color NUMBER_COLOR = new Color(122, 30, 183);     // Purple
    private static final Color DELIMITER_COLOR = new Color(103, 140, 177); // Blue
    private static final Color BOOLEAN_COLOR = new Color(147, 199, 99);    // Green
    private static final Color ERROR_COLOR = new Color(229, 84, 81);       // Red
    private static final Color DEFAULT_COLOR = new Color(204, 204, 204);   // Light Gray
    
    // Indentation tracking
    private int currentIndent = 0;
    private Stack<Integer> indentStack = new Stack<>();
    private Queue<Symbol> indentationTokens = new LinkedList<>();
    private boolean atLineStart = true;
    
    // Symbol creation helper methods
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
    
    // Token creation for syntax highlighting
    private Token token(String type, String value, Color color) {
        return new Token(type, value, yyline + 1, yycolumn + 1, color);
    }
    
    // Method to handle indentation
    private Symbol handleIndentation(int spaces) {
        if (spaces > currentIndent) {
            // Indent
            indentStack.push(currentIndent);
            currentIndent = spaces;
            return symbol(sym.INDENT);
        } else if (spaces < currentIndent) {
            // Dedent
            int dedents = 0;
            while (!indentStack.isEmpty() && spaces < currentIndent) {
                currentIndent = indentStack.pop();
                dedents++;
            }
            
            // Queue up multiple DEDENT tokens if needed
            for (int i = 1; i < dedents; i++) {
                indentationTokens.add(symbol(sym.DEDENT));
            }
            
            return symbol(sym.DEDENT);
        }
        
        return null;
    }
    
    // Method to get the next token, handling indentation
    public Symbol next_token() throws java.io.IOException {
        // Check if we have queued indentation tokens
        if (!indentationTokens.isEmpty()) {
            return indentationTokens.poll();
        }

        // Get the next token from the lexer
        Symbol token = scan();

        // If we're at the end of the file, return EOF
        if (token == null) {
            // Generate DEDENT tokens for any remaining indentation levels
            if (currentIndent > 0) {
                currentIndent = 0;
                return symbol(sym.DEDENT);
            }
            return symbol(sym.EOF);
        }

        return token;
    }
    
    // Compatibility method for the original code
    public Token yylex() throws java.io.IOException {
        Symbol symbol = next_token();
        if (symbol == null || symbol.value == null) {
            return null;
        }
        
        // Extract the Token from the Symbol
        if (symbol.value instanceof Token) {
            return (Token) symbol.value;
        }
        
        // If the Symbol doesn't contain a Token, create a default one
        return token("UNKNOWN", symbol.toString(), DEFAULT_COLOR);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PythonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol scan() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { if (atLineStart) {
            int spaces = yytext().length();
            Symbol indentToken = handleIndentation(spaces);
            atLineStart = false;
            if (indentToken != null) {
                return indentToken;
            }
        }
            }
          // fall through
          case 50: break;
          case 2:
            { return symbol(sym.error, token("ERROR", "Invalid character: " + yytext(), ERROR_COLOR));
            }
          // fall through
          case 51: break;
          case 3:
            { atLineStart = true;
        return symbol(sym.NEWLINE);
            }
          // fall through
          case 52: break;
          case 4:
            { /* Ignore whitespace */
            }
          // fall through
          case 53: break;
          case 5:
            { return symbol(sym.COMMENT, token("COMMENT", yytext(), COMMENT_COLOR));
            }
          // fall through
          case 54: break;
          case 6:
            { return symbol(sym.MODULO, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 55: break;
          case 7:
            { return symbol(sym.LPAREN, token("DELIMITER", yytext(), DELIMITER_COLOR));
            }
          // fall through
          case 56: break;
          case 8:
            { return symbol(sym.RPAREN, token("DELIMITER", yytext(), DELIMITER_COLOR));
            }
          // fall through
          case 57: break;
          case 9:
            { return symbol(sym.TIMES, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 58: break;
          case 10:
            { return symbol(sym.PLUS, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 59: break;
          case 11:
            { return symbol(sym.COMMA, token("DELIMITER", yytext(), DELIMITER_COLOR));
            }
          // fall through
          case 60: break;
          case 12:
            { return symbol(sym.MINUS, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 61: break;
          case 13:
            { return symbol(sym.DOT, token("DELIMITER", yytext(), DELIMITER_COLOR));
            }
          // fall through
          case 62: break;
          case 14:
            { return symbol(sym.DIVIDE, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 63: break;
          case 15:
            { return symbol(sym.INTEGER, token("INTEGER", yytext(), NUMBER_COLOR));
            }
          // fall through
          case 64: break;
          case 16:
            { return symbol(sym.COLON, token("DELIMITER", yytext(), DELIMITER_COLOR));
            }
          // fall through
          case 65: break;
          case 17:
            { return symbol(sym.SEMICOLON, token("DELIMITER", yytext(), DELIMITER_COLOR));
            }
          // fall through
          case 66: break;
          case 18:
            { return symbol(sym.LESS, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 67: break;
          case 19:
            { return symbol(sym.ASSIGN, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 68: break;
          case 20:
            { return symbol(sym.GREATER, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 69: break;
          case 21:
            { return symbol(sym.IDENTIFIER, token("IDENTIFIER", yytext(), DEFAULT_COLOR));
            }
          // fall through
          case 70: break;
          case 22:
            { return symbol(sym.LBRACKET, token("DELIMITER", yytext(), DELIMITER_COLOR));
            }
          // fall through
          case 71: break;
          case 23:
            { return symbol(sym.RBRACKET, token("DELIMITER", yytext(), DELIMITER_COLOR));
            }
          // fall through
          case 72: break;
          case 24:
            { return symbol(sym.LBRACE, token("DELIMITER", yytext(), DELIMITER_COLOR));
            }
          // fall through
          case 73: break;
          case 25:
            { return symbol(sym.RBRACE, token("DELIMITER", yytext(), DELIMITER_COLOR));
            }
          // fall through
          case 74: break;
          case 26:
            { return symbol(sym.NOT_EQUALS, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 75: break;
          case 27:
            { return symbol(sym.STRING, token("STRING", yytext(), STRING_COLOR));
            }
          // fall through
          case 76: break;
          case 28:
            { return symbol(sym.IDENTIFIER, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 77: break;
          case 29:
            { return symbol(sym.POWER, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 78: break;
          case 30:
            { return symbol(sym.FLOAT, token("FLOAT", yytext(), NUMBER_COLOR));
            }
          // fall through
          case 79: break;
          case 31:
            { return symbol(sym.error, token("ERROR", "Invalid identifier: " + yytext(), ERROR_COLOR));
            }
          // fall through
          case 80: break;
          case 32:
            { return symbol(sym.LESS_EQUALS, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 81: break;
          case 33:
            { return symbol(sym.EQUALS, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 82: break;
          case 34:
            { return symbol(sym.GREATER_EQUALS, token("OPERATOR", yytext(), OPERATOR_COLOR));
            }
          // fall through
          case 83: break;
          case 35:
            { return symbol(sym.IDENTIFIER, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 84: break;
          case 36:
            { return symbol(sym.IF, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 85: break;
          case 37:
            { return symbol(sym.IN, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 86: break;
          case 38:
            { return symbol(sym.OR, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 87: break;
          case 39:
            { return symbol(sym.FLOAT, token("SCIENTIFIC", yytext(), NUMBER_COLOR));
            }
          // fall through
          case 88: break;
          case 40:
            { return symbol(sym.AND, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 89: break;
          case 41:
            { return symbol(sym.DEF, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 90: break;
          case 42:
            { return symbol(sym.FOR, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 91: break;
          case 43:
            { return symbol(sym.NOT, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 92: break;
          case 44:
            { return symbol(sym.BOOLEAN, token("BOOLEAN", yytext(), BOOLEAN_COLOR));
            }
          // fall through
          case 93: break;
          case 45:
            { return symbol(sym.ELIF, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 94: break;
          case 46:
            { return symbol(sym.ELSE, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 95: break;
          case 47:
            { return symbol(sym.CLASS, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 96: break;
          case 48:
            { return symbol(sym.WHILE, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 97: break;
          case 49:
            { return symbol(sym.RETURN, token("KEYWORD", yytext(), KEYWORD_COLOR));
            }
          // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
