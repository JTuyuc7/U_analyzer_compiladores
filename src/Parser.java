
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.Symbol;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\006\003\005\004\004\001\002\000\004\051" +
    "\014\001\002\000\006\002\ufffc\110\ufffc\001\002\000\006" +
    "\002\ufffe\110\ufffe\001\002\000\004\002\013\001\002\000" +
    "\006\002\000\110\011\001\002\000\006\003\005\004\004" +
    "\001\002\000\006\002\uffff\110\uffff\001\002\000\004\002" +
    "\001\001\002\000\016\003\020\004\016\005\015\006\023" +
    "\007\017\074\021\001\002\000\020\002\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\075\ufff6\110\ufff6\001\002\000\020" +
    "\002\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\075\ufff3\110" +
    "\ufff3\001\002\000\020\002\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\075\ufff4\110\ufff4\001\002\000\020\002\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\075\ufff2\110\ufff2\001\002" +
    "\000\016\003\020\004\016\005\015\006\023\007\017\074" +
    "\021\001\002\000\016\002\ufffd\045\025\046\026\047\024" +
    "\050\027\110\ufffd\001\002\000\020\002\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\075\ufff5\110\ufff5\001\002\000\016" +
    "\003\020\004\016\005\015\006\023\007\017\074\021\001" +
    "\002\000\016\003\020\004\016\005\015\006\023\007\017" +
    "\074\021\001\002\000\016\003\020\004\016\005\015\006" +
    "\023\007\017\074\021\001\002\000\016\003\020\004\016" +
    "\005\015\006\023\007\017\074\021\001\002\000\020\002" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\075\ufff8\110\ufff8" +
    "\001\002\000\020\002\ufffa\045\ufffa\046\ufffa\047\024\050" +
    "\027\075\ufffa\110\ufffa\001\002\000\020\002\ufffb\045\ufffb" +
    "\046\ufffb\047\024\050\027\075\ufffb\110\ufffb\001\002\000" +
    "\020\002\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\075\ufff9" +
    "\110\ufff9\001\002\000\014\045\025\046\026\047\024\050" +
    "\027\075\035\001\002\000\020\002\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\075\ufff7\110\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\010\002\006\003\007\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\032\001\001\000\004\005" +
    "\031\001\001\000\004\005\030\001\001\000\004\005\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Parser.reset(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


    public static Map<String, String> tablaSimbolos = new HashMap<>();
    public static boolean tieneErroresTipo = false;

    public void syntax_error(Symbol cur_token) {
        System.err.println("Error de sintaxis en línea: " +
            (cur_token.value instanceof Token ? ((Token)cur_token.value).linea : "desconocida") +
            ", columna: " +
            (cur_token.value instanceof Token ? ((Token)cur_token.value).columna : "desconocida") +
            ". Token inesperado: " +
            (cur_token.value instanceof Token ? ((Token)cur_token.value).valor : cur_token.value));
    }

    public void report_error(String message, Object info) {
        System.err.println("Error: " + message);
    }

    public static void reset() {
        tablaSimbolos.clear();
        tieneErroresTipo = false;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= stmt_list 
            {
              Object RESULT =null;
		
          if (Parser.tieneErroresTipo) {
              System.out.println("❌ Análisis completado con errores de tipo.");
          } else {
              System.out.println("✅ Análisis completado sin errores.");
          }
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_list ::= stmt_list NEWLINE stmt 
            {
              Object RESULT =null;
		
                // Lista de sentencias que continúa
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= stmt 
            {
              Object RESULT =null;
		
                // Una sola sentencia
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= ID ASSIGN expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          Parser.tablaSimbolos.put(id.valor.toString(), val.tipo);
          System.out.println("Asignación: " + id.valor + " = " + val.valor + " (tipo: " + val.tipo + ")");

          // Si hay un error en la expresión, reportarlo
          if (val.tipo.equals("error")) {
              System.err.println("❌ Error de tipo en la asignación a '" + id.valor + "'");
              Parser.tieneErroresTipo = true;
          }
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= error 
            {
              Object RESULT =null;
		
          System.err.println("❌ Error de sintaxis: Sentencia inválida");
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS expr 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
//         System.out.println("DEBUG: Operación SUMA: " + izq.valor + " + " + der.valor);
//         System.out.println("DEBUG: Tipos: " + izq.tipo + " y " + der.tipo);

         // Verifica si alguno de los operandos ya tiene un error
         if (izq.tipo.equals("error") || der.tipo.equals("error")) {
             RESULT = new Nodo("error", izq.valor + "+" + der.valor);
             System.err.println("❌ Error: no se puede realizar la suma debido a operandos inválidos");
             Parser.tieneErroresTipo = true;
         }
         // Verifica si los operandos son numéricos
         else if (!izq.tipo.equals("int") && !izq.tipo.equals("float")) {
             System.err.println("❌ Error: operando izquierdo de suma debe ser numérico, es " + izq.tipo);
             RESULT = new Nodo("error", izq.valor + "+" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         else if (!der.tipo.equals("int") && !der.tipo.equals("float")) {
             System.err.println("❌ Error: operando derecho de suma debe ser numérico, es " + der.tipo);
             RESULT = new Nodo("error", izq.valor + "+" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         // Si ambos son numéricos pero de diferente tipo, aplicar conversión implícita
         else if (!izq.tipo.equals(der.tipo)) {
             System.out.println("⚠️ Advertencia: conversión implícita entre " + izq.tipo + " y " + der.tipo);
             RESULT = new Nodo("float", izq.valor + "+" + der.valor);
         }
         // Si ambos son del mismo tipo numérico, mantener ese tipo
         else {
             RESULT = new Nodo(izq.tipo, izq.valor + "+" + der.valor);
         }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MINUS expr 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
//         System.out.println("DEBUG: Operación RESTA: " + izq.valor + " - " + der.valor);
//         System.out.println("DEBUG: Tipos: " + izq.tipo + " y " + der.tipo);

         // Verifica si alguno de los operandos ya tiene un error
         if (izq.tipo.equals("error") || der.tipo.equals("error")) {
             RESULT = new Nodo("error", izq.valor + "-" + der.valor);
             System.err.println("❌ Error: no se puede realizar la resta debido a operandos inválidos");
             Parser.tieneErroresTipo = true;
         }
         // Verifica si los operandos son numéricos
         else if (!izq.tipo.equals("int") && !izq.tipo.equals("float")) {
             System.err.println("❌ Error: operando izquierdo de resta debe ser numérico, es " + izq.tipo);
             RESULT = new Nodo("error", izq.valor + "-" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         else if (!der.tipo.equals("int") && !der.tipo.equals("float")) {
             System.err.println("❌ Error: operando derecho de resta debe ser numérico, es " + der.tipo);
             RESULT = new Nodo("error", izq.valor + "-" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         // Si ambos son numéricos pero de diferente tipo, aplicar conversión implícita
         else if (!izq.tipo.equals(der.tipo)) {
//             System.out.println("⚠️ Advertencia: conversión implícita entre " + izq.tipo + " y " + der.tipo);
             RESULT = new Nodo("float", izq.valor + "-" + der.valor);
         }
         // Si ambos son del mismo tipo numérico, mantener ese tipo
         else {
             RESULT = new Nodo(izq.tipo, izq.valor + "-" + der.valor);
         }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr MULT expr 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
//         System.out.println("DEBUG: Operación MULTIPLICACIÓN: " + izq.valor + " * " + der.valor);
//         System.out.println("DEBUG: Tipos: " + izq.tipo + " y " + der.tipo);

         // Verifica si alguno de los operandos ya tiene un error
         if (izq.tipo.equals("error") || der.tipo.equals("error")) {
             RESULT = new Nodo("error", izq.valor + "*" + der.valor);
             System.err.println("❌ Error: no se puede realizar la multiplicación debido a operandos inválidos");
             Parser.tieneErroresTipo = true;
         }
         // Verifica si los operandos son numéricos
         else if (!izq.tipo.equals("int") && !izq.tipo.equals("float")) {
             System.err.println("❌ Error: operando izquierdo de multiplicación debe ser numérico, es " + izq.tipo);
             RESULT = new Nodo("error", izq.valor + "*" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         else if (!der.tipo.equals("int") && !der.tipo.equals("float")) {
             System.err.println("❌ Error: operando derecho de multiplicación debe ser numérico, es " + der.tipo);
             RESULT = new Nodo("error", izq.valor + "*" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         // Si ambos son numéricos pero de diferente tipo, aplicar conversión implícita
         else if (!izq.tipo.equals(der.tipo)) {
//             System.out.println("⚠️ Advertencia: conversión implícita entre " + izq.tipo + " y " + der.tipo);
             RESULT = new Nodo("float", izq.valor + "*" + der.valor);
         }
         // Si ambos son del mismo tipo numérico, mantener ese tipo
         else {
             RESULT = new Nodo(izq.tipo, izq.valor + "*" + der.valor);
         }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr DIV expr 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
//         System.out.println("DEBUG: Operación DIVISIÓN: " + izq.valor + " / " + der.valor);
//         System.out.println("DEBUG: Tipos: " + izq.tipo + " y " + der.tipo);

         // Verifica si alguno de los operandos ya tiene un error
         if (izq.tipo.equals("error") || der.tipo.equals("error")) {
             RESULT = new Nodo("error", izq.valor + "/" + der.valor);
             System.err.println("❌ Error: no se puede realizar la división debido a operandos inválidos");
             Parser.tieneErroresTipo = true;
         }
         // Verifica si los operandos son numéricos
         else if (!izq.tipo.equals("int") && !izq.tipo.equals("float")) {
             System.err.println("❌ Error: operando izquierdo de división debe ser numérico, es " + izq.tipo);
             RESULT = new Nodo("error", izq.valor + "/" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         else if (!der.tipo.equals("int") && !der.tipo.equals("float")) {
             System.err.println("❌ Error: operando derecho de división debe ser numérico, es " + der.tipo);
             RESULT = new Nodo("error", izq.valor + "/" + der.valor);
             Parser.tieneErroresTipo = true;
         }
         // Si ambos son numéricos pero de diferente tipo, aplicar conversión implícita
         else if (!izq.tipo.equals(der.tipo)) {
//             System.out.println("⚠️ Advertencia: conversión implícita entre " + izq.tipo + " y " + der.tipo);
             RESULT = new Nodo("float", izq.valor + "/" + der.valor);
         }
         // Si ambos son del mismo tipo numérico, siempre retornar float (división en Python)
         else {
             RESULT = new Nodo("float", izq.valor + "/" + der.valor);
         }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= LPAREN expr RPAREN 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
//          System.out.println("DEBUG: Expresión entre paréntesis: (" + e.valor + ")");
          RESULT = e;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= NUM 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
//         System.out.println("DEBUG: Número entero: " + num.valor);
         RESULT = new Nodo("int", num.valor);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= FLOAT 
            {
              Nodo RESULT =null;
		int fltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token flt = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
//         System.out.println("DEBUG: Número flotante: " + flt.valor);
         RESULT = new Nodo("float", flt.valor);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= STRING 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
//         System.out.println("DEBUG: String: " + str.valor);
         RESULT = new Nodo("string", str.valor);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         String nombre = id.valor.toString();
         String tipo = Parser.tablaSimbolos.get(nombre);
//         System.out.println("DEBUG: Variable: " + nombre + " de tipo: " + (tipo != null ? tipo : "no definido"));

         if (tipo == null) {
             System.err.println("❌ Error: variable '" + nombre + "' no está definida.");
             Parser.tieneErroresTipo = true;
             RESULT = new Nodo("error", nombre);
         } else {
             RESULT = new Nodo(tipo, nombre);
         }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= error 
            {
              Nodo RESULT =null;
		
          System.err.println("❌ Error de sintaxis: Expresión inválida");
          Parser.tieneErroresTipo = true;
          RESULT = new Nodo("error", "expr_error");
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
